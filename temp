<template>
  <v-app>

    <v-container>
      <div id="selector" class="text-center">
      <h1 class="text-center">Choose the dogs breed</h1>
        <select v-model="selected" :items="novoArray" @change="getRacas()">
          <option v-for="(breed, chave) in novoArray" :key="chave" :value="breed.nome"> {{ breed.nome }}</option>
        </select>
      </div>
    </v-container>
    

 
    <v-container>
      <v-row>
        <v-col cols="12" sm="6" md="4" lg="3" v-for="(raca, index) in displayedPosts" :key="index">
          <v-card class="pa-2" outlined tile>
            <v-img
              height="200px" 
              :src="raca" 
            />
            <v-card-actions>
              <v-spacer></v-spacer>
              <v-btn icon @click="toFavorites(raca)">
                <v-icon :color="ifFavorite(raca) ? 'red' : ''">mdi-heart</v-icon>
              </v-btn>
            </v-card-actions>
          </v-card>
        </v-col>
      </v-row> 
    </v-container>
       
    <div class="text-center" v-if="paginacao">
      <v-pagination
        v-model="page"
        :length="numberOfPages"
        :total-visible="7"
        circle
      ></v-pagination>
    </div>

    <v-spacer></v-spacer>
    
    <v-container>
      <h2 class="text-center">Favorite Dogs</h2>
      <v-row>
        <v-col cols="12" sm="6" md="4" lg="3" v-for="(pet, index) in favoriteDogs" :key="index">
          <v-card class="pa-2" outlined tile>
            <v-img 
              height="200px" 
              :src="pet"  
            />
            <v-card-actions>
              <v-spacer></v-spacer>
              <v-btn icon @click="removeFavorites(index)">
                <v-icon :color="'red'">mdi-heart</v-icon>
              </v-btn>
            </v-card-actions>
          </v-card>
        </v-col>
      </v-row>
    </v-container>

    <!-- <v-container grid-list-md fluid>
      <v-layout wrap>
        <v-img v-for="(pet, index) in favoriteDogs" :key="index" :src="pet" max-width="150" @click="removeFavorites(index)"></v-img>
      </v-layout>
    </v-container> -->

  </v-app>
</template>

<script>

import axios from "axios"

export default {

  data() {
    return {
      novoArray: [],
      selectRacas: [],
      selected: "",
      page: 1,
      perPage: 8,
      pages: [],
      favoriteDogs: [],
      numberOfPages: "",
      paginacao: false
      
    }
  },
  created(){
    this.favoriteDogs = localStorage.getItem('favoritos') ? localStorage.getItem('favoritos').split(',') : []
    this.getAllBreeds()
  },
  // mounted(){
  //   if(localStorage.favoriteDogs){
  //     this.favoriteDogs = localStorage.favoriteDogs
  //   }
  // },
  methods: {
    getAllBreeds(){
      axios
      .get('https://dog.ceo/api/breeds/list/all')
      .then(response => {
        this.allBreeds = response.data.message
        this.newArray()
      })
      .catch(error => {
        console.log(error)
      })
    },
    newArray(){
      for(const raca in this.allBreeds){
        if(this.allBreeds[raca].length > 0){
          this.allBreeds[raca].forEach(subRaca => {
            this.novoArray.push({
              nome: raca + ' ' + subRaca
            })
          })
        } else {
          this.novoArray.push({
            nome: raca
          })
        }
      }
    },
    getRacas(){

      let url = this.selected

      if(this.selected.includes(" ") ) {
        url = this.selected.replace(" ", "/")
 
      }

      axios
      .get(`https://dog.ceo/api/breed/${url}/images/random/50`)
      .then(response => {
        this.selectRacas = response.data.message
        this.setPages()
      })
      .catch(error => {
        console.log(error)
      })
    },
    setPages() {
      this.numberOfPages = Math.ceil(this.selectRacas.length / this.perPage);
      for (let index = 1; index <= this.numberOfPages; index++) {
        this.pages.push(index);
        this.paginacao = true
      }
    },
    paginate(selectRacas) {
      let page = this.page;
      let perPage = this.perPage;
      let from = (page * perPage) - perPage;
      let to = (page * perPage);
      return selectRacas.slice(from, to);
    },

    toFavorites(raca){
      if(this.ifFavorite(raca)){
        let index = this.favoriteDogs.indexOf(raca)
        this.removeFavorites(index)
      }else{
        this.addToFavorites(raca)
      }
    },

    ifFavorite(raca){
      if(this.favoriteDogs.includes(raca)){
        return true
      } else {
        return false
      }
    },

    addToFavorites(raca) {
      this.favoriteDogs.push(raca)
      localStorage.setItem('favoritos', this.favoriteDogs)
    },
    removeFavorites(index){
      this.favoriteDogs.splice(index,1)
      localStorage.setItem('favoritos', this.favoriteDogs)
    }
  },
  computed: {
    displayedPosts() {
      return this.paginate(this.selectRacas)
    }
  },
  filters: {
		trimWords(value){
			return value.split(" ").splice(0,20).join(" ") + '...';
		}
	}
  // watch: {
  //   // posts() {
  //   //   this.setPages();
  //   // },
  //   favoriteDogs(newFavoriteDogs) {
  //     localStorage.favoriteDogs = newFavoriteDogs
  //   }
  // }
}

</script>

<style scoped>

  select {
    background-color: yellow;

  }

  img {
    width: 80%;
  }

  button.page-link {
	display: inline-block;
  }
  button.page-link {
      font-size: 20px;
      color: #29b3ed;
      font-weight: 500;
  }
  .offset{
    width: 500px !important;
    margin: 20px auto;  
  }
</style>
